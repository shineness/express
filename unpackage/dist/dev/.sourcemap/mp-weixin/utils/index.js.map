{"version":3,"file":"index.js","sources":["utils/index.js"],"sourcesContent":["//判断是否上一页\r\nexport const getCurrentPagesBut = () => {\r\n\tlet isPrevPage = false\r\n\tlet pages = getCurrentPages(); // 获取当前页面栈的实例\r\n\tlet currPage = pages[pages.length - 1]; //当前页面\r\n\tlet prevPage = pages[pages.length - 2]; //上一个页面\r\n\tif (prevPage && (prevPage.route || prevPage.__route__)) {\r\n\t\tisPrevPage = true\r\n\t}\r\n\treturn isPrevPage\r\n\r\n}\r\n\r\n// 页面跳转封装\r\nexport const pagesRoute = () => {\r\n\tconst isPrevPage = getCurrentPagesBut()\r\n\tif (isPrevPage) {\r\n\t\tuni.navigateBack()\r\n\t} else {\r\n\t\tlet url = '/pages/tabBar/home/index'\r\n\t\tlet type = userStore().customNum\r\n\t\tif (type == 1) {\r\n\t\t\turl = '/pages/tabBar/eventsManage/index'\r\n\t\t} else if (type == 2) {\r\n\t\t\turl = '/pages/tabBar/savingsAccount/index'\r\n\t\t} else if (type == 3) {\r\n\t\t\turl = '/pages/tabBar/bill/index'\r\n\t\t} else if (type == 4) {\r\n\t\t\turl = '/pages/tabBar/mine/index'\r\n\t\t}\r\n\t\tuni.switchTab({\r\n\t\t\turl\r\n\t\t})\r\n\t}\r\n\r\n}\r\nexport const makePhoneCall = (e) => {\r\n\tdebugger\r\n\tuni.makePhoneCall({\r\n\t\tphoneNumber: e||\"18866211816\",\r\n\t\tsuccess: () => console.log('拨号成功'),\r\n\t\tfail: (err) => console.error('拨号失败:', err)\r\n\t});\r\n}\r\n\r\nexport function findValueByRange(inputNumber, rangeObj, str) { //获取所在区间的续重\r\n\t// 将输入转换为数字\r\n\tconst num = parseFloat(inputNumber);\r\n\r\n\t// 获取所有ztll_开头的键\r\n\tconst rangeKeys = Object.keys(rangeObj).filter(key => key.startsWith(str) && key !== str + 'base');\r\n\r\n\t// 按区间排序（确保顺序正确）\r\n\trangeKeys.sort((a, b) => {\r\n\t\tconst aMin = parseFloat(a.split('-')[0].replace(str, ''));\r\n\t\tconst bMin = parseFloat(b.split('-')[0].replace(str, ''));\r\n\t\treturn aMin - bMin;\r\n\t});\r\n\r\n\t// 查找匹配的区间\r\n\tfor (const key of rangeKeys) {\r\n\t\tconst [minStr, maxStr] = key.replace(str, '').split('-');\r\n\t\tconst min = parseFloat(minStr);\r\n\t\tconst max = parseFloat(maxStr);\r\n\r\n\t\tif (num > min && num <= max) {\r\n\t\t\treturn rangeObj[key]; // 去除可能的空格\r\n\t\t}\r\n\t}\r\n\r\n\t// 如果没有找到匹配的区间，返回null或默认值\r\n\treturn null;\r\n}"],"names":["uni"],"mappings":";;AACO,MAAM,qBAAqB,MAAM;AACvC,MAAI,aAAa;AACjB,MAAI,QAAQ;AACG,QAAM,MAAM,SAAS,CAAC;AACrC,MAAI,WAAW,MAAM,MAAM,SAAS,CAAC;AACrC,MAAI,aAAa,SAAS,SAAS,SAAS,YAAY;AACvD,iBAAa;AAAA,EACb;AACD,SAAO;AAER;AAGY,MAAC,aAAa,MAAM;AAC/B,QAAM,aAAa,mBAAoB;AACvC,MAAI,YAAY;AACfA,kBAAAA,MAAI,aAAc;AAAA,EACpB,OAAQ;AACN,QAAI,MAAM;AACV,QAAI,OAAO,UAAS,EAAG;AACvB,QAAI,QAAQ,GAAG;AACd,YAAM;AAAA,IACT,WAAa,QAAQ,GAAG;AACrB,YAAM;AAAA,IACT,WAAa,QAAQ,GAAG;AACrB,YAAM;AAAA,IACT,WAAa,QAAQ,GAAG;AACrB,YAAM;AAAA,IACN;AACDA,kBAAAA,MAAI,UAAU;AAAA,MACb;AAAA,IACH,CAAG;AAAA,EACD;AAEF;AACY,MAAC,gBAAgB,CAAC,MAAM;AACnC;AACAA,gBAAAA,MAAI,cAAc;AAAA,IACjB,aAAa,KAAG;AAAA,IAChB,SAAS,MAAMA,cAAAA,MAAA,MAAA,OAAA,wBAAY,MAAM;AAAA,IACjC,MAAM,CAAC,QAAQA,oBAAA,MAAA,SAAA,wBAAc,SAAS,GAAG;AAAA,EAC3C,CAAE;AACF;AAEO,SAAS,iBAAiB,aAAa,UAAU,KAAK;AAE5D,QAAM,MAAM,WAAW,WAAW;AAGlC,QAAM,YAAY,OAAO,KAAK,QAAQ,EAAE,OAAO,SAAO,IAAI,WAAW,GAAG,KAAK,QAAQ,MAAM,MAAM;AAGjG,YAAU,KAAK,CAAC,GAAG,MAAM;AACxB,UAAM,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,KAAK,EAAE,CAAC;AACxD,UAAM,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,QAAQ,KAAK,EAAE,CAAC;AACxD,WAAO,OAAO;AAAA,EAChB,CAAE;AAGD,aAAW,OAAO,WAAW;AAC5B,UAAM,CAAC,QAAQ,MAAM,IAAI,IAAI,QAAQ,KAAK,EAAE,EAAE,MAAM,GAAG;AACvD,UAAM,MAAM,WAAW,MAAM;AAC7B,UAAM,MAAM,WAAW,MAAM;AAE7B,QAAI,MAAM,OAAO,OAAO,KAAK;AAC5B,aAAO,SAAS,GAAG;AAAA,IACnB;AAAA,EACD;AAGD,SAAO;AACR;;;;"}